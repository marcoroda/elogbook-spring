package bootsample.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import bootsample.dao.UserRepository;
import bootsample.model.User;

@RestController
public class UserController {

	@Autowired
	// private TaskService taskService;
	// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	/**
	 * GET /addUser --> Create a new user and save it in the database.
	 * Usage: http://localhost:8080/addUser?email=[marcoroda20@gmail.com]&name=[Marco Roda Gmail]
	 */
	@RequestMapping(path = "/addUser") // Map ONLY GET Requests
	@ResponseBody
	public String addNewUser(@RequestParam String email, @RequestParam String name) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		try {
			User user = new User();
			user.setEmail(email);
			user.setName(name);
			userRepository.save(user);
		} catch (Exception ex) {
			return "Error adding the user:  " + ex.toString();
		}

		return "User added!!";
	}

	/**
	 * GET /delete --> Delete the user having the passed id. Usage:
	 * http://localhost:8080/deleteUser?id=2
	 */
	@RequestMapping("/deleteUser")
	@ResponseBody
	public String delete(long id) {
		try {
			User user = new User(id);
			userRepository.delete(user);
		} catch (Exception ex) {
			return "Error deleting the user:" + ex.toString();
		}
		return "User succesfully deleted!";
	}

	
	/**
	 * GET /get-by-email --> Return the id for the user having the passed email.
	 * Usage: 
	 */
	@RequestMapping("/get-by-email")
	@ResponseBody
	public String getByEmail(String email) {
		String userId = "";
		try {
			User user = userRepository.findByEmail(email);
			userId = String.valueOf(user.getId());
		} catch (Exception ex) {
			return "User not found";
		}
		return "The user id is: " + userId;
	}

	@GetMapping(path = "/allUsers")
	@ResponseBody
	public Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
}